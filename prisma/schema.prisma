// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  TEACHER
  STUDENT
  SCHOOLADMIN
  SUPERADMIN
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  hashedPassword String?
  role           ROLE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  studentProfile Student? // student profile associated with this user
  teacherProfile Teacher? // teacher profile associated with this user
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// school
model School {
  id       String @id @default(cuid())
  schoolId String @unique
  name     String
  address  String
  town     String
  province String
  region   String
  zipCode  String

  fullAddress String

  phone     String
  email     String
  website   String?
  logo      String?
  slogan    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolAdmins User[]
  students     Student[]
  teachers     Teacher[]
}

model Student {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentId String @unique
  name      String
  email     String
  phone     String
  address   String
  gender    Gender

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}

model Teacher {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  teacherId String @unique
  name      String
  email     String
  phone     String
  address   String
  gender    Gender

  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
}
